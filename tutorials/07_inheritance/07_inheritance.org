#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Inheritance 
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes


* Introduction

Inheritance is a powerful concept in object-oriented languages. Its basic premise is that a new class can be created
based on another one. The new class (called the /derived/ class) inherits all the attributes and methods of the other class
(its /base/ class).

As with previous labs, download the files from 
https://github.com/dmgerman/csc116F17labs/raw/master/tutorials/files/lab07-files.zip
and expand them into your h: drive.

* Part 1

Go to the directory ~part1~ of the lab and run cmake as usual to create the Visual Studio configuration files. 
Open the file ~part1.cpp~.

In this part you will implement a class for a two dimensional ~point_class~. 

The declaration for ~point_class~ is:

#+BEGIN_SRC C++
class Point{
    double x; 
    double y;
public:
// constructors
    Point();
    Point(const double _x, const double _y);
    Point(const Point &p);
// get coordinates
    double getX()const;
    double getY() const;
// return a new point with the inverted coordinates
    Point operator-();
// assignment operator
    Point &operator=(Point p2);
// translate a point by the coordinates of the other point    
    Point &operator+=(Point p2);
// compute the distance to another point
    double distance(Point p2);
// return 0 for a point
    virtual double area();
// return the name of the class
    virtual std::string name();
// return a string describing the current object
    virtual std::string properties();
};

#+END_SRC

The ~point~ has the following constructors:

- A default constructor that sets its coordinates to (0,0)
- A constructor that takes two coordinates
- A copy constructor 

The ~point~ has the following methods:

- getX(): retrieve its X coordinate
- getY(): retrieve its Y coordinate
- operator-: returns a new point with the coordinates invertd
- operator=: set the point to the (x,y) coordinates of the point provided
- distance(point p2): returns the distance to another point
- area(): return zero (we will assume that the area of  point is zero)
- name(): returns the string "point"
- properties(): return a string that describes the main properties of the 

Some methods are not implemented.  Go through each of them an implement those missing.

Test your implementation.

** Questions:

1. How does a constructor (such as ~Circle::Circle(const Circle &sq)~) call the constructor of its base class?


* Part 2

For this part we have implemented a derived class of ~point~: ~square~. It will inherit
most of its methods  from ~point~, override some and add new ones.

- Go to the directory ~part2~
- Copy the file point.cpp from your solution of part1 into this directory.
- Create the directory build and run cmake as usual.

Open the file ~square.hpp~. The declaration for ~square_class~ is:

#+BEGIN_SRC C++
class Square: public Point{
    double side;
    
public:
// constructors
    Square(const Square &sq);
    Square(double _x, double _y, double _side);
    Square();
    
    double area();
    double getSide() const;

    std::string name();

    std::string properties();

};
#+END_SRC


Open ~square.cpp~ and finish the implementation of the class.

Test your implementation.

** Questions:

1. Modify the file ~point.hpp~. Remove the three occurrences of the word ~virtual~. Recompile your program and run the tests.
   Compare the new output with the expected output.
   Explain the impact of ~virtual~ in the class ~Square~.

2. Look at the source code of the method ~Square::properties~. Explain how the method is implemented, including what does the call to 
   ~Point::properties~ does.


* Part 3

For this part you will implement a a derived class of ~Point~ called ~Circle~. As ~Square~, it will inherit from ~Point~ .

- Go to the directory ~part3~. 
- Copy the file ~point.cpp~ from part1 into  this directory. 
- Create the directory build and run cmake as usual


The declaration for ~Circle~ is:

#+BEGIN_SRC C++
class Circle: public Point{
    double radius;
    
public:
// constructors
    Circle(const Circle &sq);
    Circle(double _x, double _y, double _side);
    Circle();
    
    double area();
    double getRadius() const;

    std::string name();
    std::string properties();

};
#+END_SRC


Finish the implementation of the class in the file ~circle.cpp~. 

Test your implementation.


