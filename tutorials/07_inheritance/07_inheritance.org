#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Inheritance
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes


* Introduction

Inheritance is a powerful concept in object-oriented languages. Its basic premise is that a new class can be created
based on another one. The new class (called the /derived/ class) inherits all the attributes and methods of the other class
(its /base/ class).

As with previous labs, download the files from
https://github.com/dmgerman/csc116F17labs/raw/master/tutorials/files/lab07-files.zip
and expand them into your h: drive.

* Part 1

Go to the directory ~part1~ of the lab and run cmake as usual to create the Visual Studio configuration files.
Open the file ~part1.cpp~.

In this part you will implement a class for a two dimensional ~Point~.

The declaration for ~Point~ is:

#+BEGIN_SRC C++
class Point{
	double x;
	double y;
public:
	// constructors
	Point();
	Point(double x, double y);
	Point(Point const & p);
	// get coordinates
	double getX() const;
	double getY() const;
	// return a new point with the inverted coordinates
	Point operator-() const;
	// assignment operator
	Point &operator=(Point const & p2);
	// translate a point by the coordinates of the other point
	Point &operator+=(Point const & p2);
	// add two points together
	Point operator+(Point const & p2) const;
	// multiply a point by a sclar
	Point operator*(double s) const;
	// compute the distance to another point
	double distance(Point const & p2) const;
};

#+END_SRC

The ~Point~ has the following constructors:

- A default constructor that sets its coordinates to (0,0)
- A constructor that takes two coordinates
- A copy constructor

The ~Point~ has the following methods:

- getX(): retrieve its X coordinate
- getY(): retrieve its Y coordinate
- operator-: returns a new point with the coordinates inverted
- operator=: set the point to the (x,y) coordinates of the point provided
- operator+: add the fields of two points
- operator*: multiply the fields of a point by a scalar
- distance(point p2): returns the distance to another point

These methods are not implemented. Go through and implement them.

Test your implementation.

* Part 2

Copy your implementation of ~point.cpp~ from part 1.

For this part we implement ~Rectangle~, which is a derived class of ~Shape~.

Open ~shape.hpp~, the declaration for ~Shape~ is:

#+BEGIN_SRC C++
class Shape {
public:
	// Abstract methods
	virtual double area() const = 0;
	virtual double perimeter() const = 0;
	virtual Point center() const = 0;

	virtual std::string name() const {
		return "Shape";
	}
};
#+END_SRC

All shapes must implement ~area~, ~perimeter~, and ~center~.

~name~ simply returns the name of the class, so we should probably update that too.

Open ~rectangle.hpp~

#+BEGIN_SRC C++
class Rectangle: public Shape {
public:
	// Constructors
	Rectangle(Point const & min, Point const & max);
	Rectangle(double x, double y, double width, double height);
	/*
	* inherited methods that we need to implement
	* or reimplement
	*/
	double area() const override;
	double perimeter() const override;
	Point center() const override;
	std::string name() const override;

	// Other methods
	double width() const;
	double height() const;
	Point getMin() const;
	Point getMax() const;

private:
	Point mMin;
	Point mMax;
};
#+END_SRC

Rectangle has two constructors, four methods that it overrides from the ~Shape~ class,  and four other methods that do not apply to all shapes.

When a class inherits from another class, it has an /is-a/ relationship with that object. In this case, a ~Rectangle~ is a ~Shape~. When a class is composed of an object when it contains member variables of that type. This is called a /has-a/ relationship. In this case, the ~Rectangle~ has a ~Point~, or multiple points.

Open ~rectangle.cpp~ and finish implementing the methods.

Test your implementation.


* Part 3

For this part, you will implement a derived class of ~Rectangle~, the ~Square~. Again, a ~Square~ is a ~Rectangle~, and it has points.
Because the ~Square~ is a  ~Rectangle~, we inherit the members and methods from ~Rectangle~.

Copy ~point.cpp~ and ~rectangle.cpp~ from part2.

- Go to the directory ~part3/~.
- Copy ~point.cpp~ from ~part2/~ into this directory
- Copy ~rectangle.cpp~ from ~part2/~ into this directory.
- Create the directory build and run cmake as usual

#+BEGIN_SRC C++
class Square : public Rectangle {
public:
  Square(Point const & min, double width);

  std::string name() const override {
    return "Square";
  }
};
#+END_SRC

* Questions

1. Can we construct a ~Shape~ object?
2. What is the purpose of virtual methods? How are they different from normal methods?
3. How does ~Square~ call the ~Rectangle~ constructor of it's base class?
4. Note how there are calls to the ~area~, ~width~, ~height~ and some other methods in ~part3.cpp~ from square. Where are they defined?
5. We can call methods defined in the ~Rectangle~ class from ~Square~. Can we call methods defined in the ~Shape~ class from ~Square~?
