#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: 
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes

* Classes

This lab contains an introduction to implementing methods of a simple class, and also includes
some extra practice working with strings and exceptions.

The same data structure is used for both parts of the lab (part 1 and part 2 test different aspects
of the functionality, but you can recycle your part 1 code for part 2).

The class you will implement in this lab is called ~Clock~. Each ~Clock~ instance contains an internal
hour and minute, and the class has methods to access or modify the time. To ensure that the hour and minute
are not set to invalid values (like "26:92"), the data itself is not made public to users of the ~Clock~ class.
Instead, the hour and minute can be read and modified using methods, which include error checking to ensure
that the time is always valid. Your task in parts 1 and 2 below is to implement the various behaviors of the ~Clock~ class.

* Download the files

As with previous labs, download the files from 
https://github.com/dmgerman/csc116/raw/master/tutorials/files/lab05-files.zip
and expand them into your h: drive.

* Part 1: Implementing the Clock interface

Run cmake to create the Visual Studio configuration files. See Part1 of [[https://github.com/dmgerman/csc116/blob/master/tutorials/01_hello_world/01_hello_world.org][Lab01]] for details how to do it.

The provided program for part 1 is called ~part1~, and contains the definition of a class ~Clock~ that has a number of methods which
are missing code. To pass the part 1 tests, you must correctly implement all of the missing methods except the constructor which takes an argument of type ~std::string~ (this
constructor is clearly marked as being reserved for part 2). The comments in ~part1.cpp~ describe the expected behavior of each method. Some of the methods are required to handle
error cases by throwing standard exceptions.
 
As usual, several automated tests have been provided, and should all pass once your solution is complete.

* Part 2: Parsing times from strings

The part 2 template contains the same empty definition of ~Clock~ as part 1. You can copy and paste your part 1 code (once it works) over the blank ~Clock~ class in part 2 to save
some work. The missing constructor, which takes a ~std::string~, is intended to be used to parse strings of the form "hour:minute" (such as ~08:30~ or ~18:10~) into ~Clock~ objects.
The comment block above the constructor gives a full description of the expected behavior. You may want to consult your assignment 2 code if you have trouble parsing the string.

Once the missing constructor is added (along with the part 1 code), all of the automated tests for Part 2 should pass.

* Questions

Answer the following questions:

- In the various ~Clock~ constructors in parts 1 and 2, exceptions are thrown if the provided hour and minute values are invalid. Is there any other way to handle invalid inputs to a constructor, given that constructors cannot have a return value?

- Suppose the internal state of the ~Clock~ was stored with only a ~minute~ value, counting minutes from midnight, instead of both ~hour~ and ~minute~ (so instead of storing ~hour = 10~ and ~minute = 30~ for the time ~10:30~, the class would store ~minute = 630~).
  Assuming the class still had the same set of public methods (with the same names, parameters and behavior), would this change require any modification to ~main()~ or other users of the class?


